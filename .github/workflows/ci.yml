name: CI Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing and Quality Checks
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black bandit safety

      - name: Code formatting check
        run: |
          black --check backend/ --diff

      - name: Lint Python code
        run: |
          flake8 backend/ --max-line-length=100 --exclude=backend/files/

      - name: Security scanning
        run: |
          bandit -r backend/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Run backend tests with coverage
        run: |
          cd backend
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload backend coverage to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend Testing and Quality Checks  
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint frontend code
        run: |
          cd frontend
          npm run lint || npx eslint src/ --ext .js,.jsx

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Upload frontend coverage to Codecov
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v3
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security and Dependency Scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Frontend security audit
        run: |
          cd frontend
          npm audit --audit-level=high

  # Integration Tests (End-to-End)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          cd frontend && npm ci

      - name: Start backend server
        run: |
          cd backend
          uvicorn main:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Build and serve frontend
        run: |
          cd frontend
          npm run build
          npx serve -s build -l 3000 &
          sleep 5

      - name: Run integration tests
        run: |
          # Test API health
          curl -f http://localhost:8000/health || exit 1
          
          # Test FOCUS generation endpoint
          curl -f -X POST http://localhost:8000/generate-cur \
            -H "Content-Type: application/json" \
            -d '{"profile": "Greenfield", "distribution": "Evenly Distributed", "row_count": 10}' || exit 1

  # Quality Gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()
    
    steps:
      - name: Check job status
        run: |
          if [[ "${{ needs.backend-tests.result }}" != "success" ]]; then
            echo "Backend tests failed"
            exit 1
          fi
          if [[ "${{ needs.frontend-tests.result }}" != "success" ]]; then
            echo "Frontend tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "Security scan failed"
            exit 1
          fi
          echo "All quality checks passed!"